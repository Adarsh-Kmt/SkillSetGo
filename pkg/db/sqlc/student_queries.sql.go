// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: student_queries.sql

package sqlc

import (
	"context"
)

const getEligibleStudents = `-- name: GetEligibleStudents :many
SELECT student_table.student_id, usn, name, branch, cgpa, num_active_backlogs, email_id,counsellor_email_id
FROM student_table
JOIN student_job_application_table
ON student_table.student_id = student_job_application_table.student_id
WHERE job_id = $1
`

func (q *Queries) GetEligibleStudents(ctx context.Context, jobID int32) ([]*StudentTable, error) {
	rows, err := q.db.Query(ctx, getEligibleStudents, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*StudentTable
	for rows.Next() {
		var i StudentTable
		if err := rows.Scan(
			&i.StudentID,
			&i.Usn,
			&i.Name,
			&i.Branch,
			&i.Cgpa,
			&i.NumActiveBacklogs,
			&i.EmailID,
			&i.CounsellorEmailID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO student_table(student_id, usn, name, branch, cgpa, num_active_backlogs, email_id,counsellor_email_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertUserParams struct {
	StudentID         int32   `json:"student_id"`
	Usn               string  `json:"usn"`
	Name              string  `json:"name"`
	Branch            string  `json:"branch"`
	Cgpa              float32 `json:"cgpa"`
	NumActiveBacklogs int32   `json:"num_active_backlogs"`
	EmailID           string  `json:"email_id"`
	CounsellorEmailID string  `json:"counsellor_email_id"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.StudentID,
		arg.Usn,
		arg.Name,
		arg.Branch,
		arg.Cgpa,
		arg.NumActiveBacklogs,
		arg.EmailID,
		arg.CounsellorEmailID,
	)
	return err
}
