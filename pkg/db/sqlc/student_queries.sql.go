// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: student_queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEligibleStudents = `-- name: GetEligibleStudents :many
SELECT student_table.student_id, usn, name, branch, cgpa, num_active_backlogs, email_id
FROM student_job_application_table
JOIN student_table
ON student_table.student_id = student_job_application_table.student_id
WHERE job_id = $1
`

type GetEligibleStudentsRow struct {
	StudentID         int32   `json:"student_id"`
	Usn               string  `json:"usn"`
	Name              string  `json:"name"`
	Branch            string  `json:"branch"`
	Cgpa              float32 `json:"cgpa"`
	NumActiveBacklogs int32   `json:"num_active_backlogs"`
	EmailID           string  `json:"email_id"`
}

func (q *Queries) GetEligibleStudents(ctx context.Context, jobID int32) ([]*GetEligibleStudentsRow, error) {
	rows, err := q.db.Query(ctx, getEligibleStudents, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetEligibleStudentsRow
	for rows.Next() {
		var i GetEligibleStudentsRow
		if err := rows.Scan(
			&i.StudentID,
			&i.Usn,
			&i.Name,
			&i.Branch,
			&i.Cgpa,
			&i.NumActiveBacklogs,
			&i.EmailID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobOfferActByDate = `-- name: GetJobOfferActByDate :one
SELECT act_by_date 
FROM student_offer_table
WHERE student_id = $1 
AND job_id = $2
`

type GetJobOfferActByDateParams struct {
	StudentID int32 `json:"student_id"`
	JobID     int32 `json:"job_id"`
}

func (q *Queries) GetJobOfferActByDate(ctx context.Context, arg GetJobOfferActByDateParams) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, getJobOfferActByDate, arg.StudentID, arg.JobID)
	var act_by_date pgtype.Timestamp
	err := row.Scan(&act_by_date)
	return act_by_date, err
}

const getJobOffers = `-- name: GetJobOffers :many
SELECT job_table.job_id, company_name, job_role, job_type, ctc, salary_tier, action, action_date, act_by_date
FROM student_offer_table JOIN job_table 
ON student_offer_table.job_id = job_table.job_id
JOIN company_table
ON job_table.company_id = company_table.company_id
WHERE student_id = $1
`

type GetJobOffersRow struct {
	JobID       int32            `json:"job_id"`
	CompanyName string           `json:"company_name"`
	JobRole     string           `json:"job_role"`
	JobType     string           `json:"job_type"`
	Ctc         float32          `json:"ctc"`
	SalaryTier  string           `json:"salary_tier"`
	Action      string           `json:"action"`
	ActionDate  pgtype.Timestamp `json:"action_date"`
	ActByDate   pgtype.Timestamp `json:"act_by_date"`
}

func (q *Queries) GetJobOffers(ctx context.Context, studentID int32) ([]*GetJobOffersRow, error) {
	rows, err := q.db.Query(ctx, getJobOffers, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetJobOffersRow
	for rows.Next() {
		var i GetJobOffersRow
		if err := rows.Scan(
			&i.JobID,
			&i.CompanyName,
			&i.JobRole,
			&i.JobType,
			&i.Ctc,
			&i.SalaryTier,
			&i.Action,
			&i.ActionDate,
			&i.ActByDate,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const performJobOfferAction = `-- name: PerformJobOfferAction :exec
UPDATE student_offer_table SET action = $3, action_date = NOW() 
WHERE student_id = $1
AND job_id = $2
`

type PerformJobOfferActionParams struct {
	StudentID int32  `json:"student_id"`
	JobID     int32  `json:"job_id"`
	Action    string `json:"action"`
}

func (q *Queries) PerformJobOfferAction(ctx context.Context, arg PerformJobOfferActionParams) error {
	_, err := q.db.Exec(ctx, performJobOfferAction, arg.StudentID, arg.JobID, arg.Action)
	return err
}

const registerForJob = `-- name: RegisterForJob :exec
INSERT INTO student_job_application_table(student_id, job_id, applied_on_date)
VALUES($1, $2, NOW())
`

type RegisterForJobParams struct {
	StudentID int32 `json:"student_id"`
	JobID     int32 `json:"job_id"`
}

func (q *Queries) RegisterForJob(ctx context.Context, arg RegisterForJobParams) error {
	_, err := q.db.Exec(ctx, registerForJob, arg.StudentID, arg.JobID)
	return err
}
