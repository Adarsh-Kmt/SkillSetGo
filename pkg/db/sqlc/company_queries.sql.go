// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: company_queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfCompanyCreatedJob = `-- name: CheckIfCompanyCreatedJob :one
SELECT EXISTS(
    SELECT company_id
    FROM job_table
    WHERE company_id = $1
    AND job_id = $2
)
`

type CheckIfCompanyCreatedJobParams struct {
	CompanyID int32 `json:"company_id"`
	JobID     int32 `json:"job_id"`
}

func (q *Queries) CheckIfCompanyCreatedJob(ctx context.Context, arg CheckIfCompanyCreatedJobParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkIfCompanyCreatedJob, arg.CompanyID, arg.JobID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createJob = `-- name: CreateJob :exec
INSERT INTO job_table(company_id, job_role, job_type, ctc, salary_tier, apply_by_date, cgpa_cutoff, eligible_batch, eligible_branches)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateJobParams struct {
	CompanyID        int32            `json:"company_id"`
	JobRole          string           `json:"job_role"`
	JobType          string           `json:"job_type"`
	Ctc              float32          `json:"ctc"`
	SalaryTier       string           `json:"salary_tier"`
	ApplyByDate      pgtype.Timestamp `json:"apply_by_date"`
	CgpaCutoff       float32          `json:"cgpa_cutoff"`
	EligibleBatch    int32            `json:"eligible_batch"`
	EligibleBranches []string         `json:"eligible_branches"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) error {
	_, err := q.db.Exec(ctx, createJob,
		arg.CompanyID,
		arg.JobRole,
		arg.JobType,
		arg.Ctc,
		arg.SalaryTier,
		arg.ApplyByDate,
		arg.CgpaCutoff,
		arg.EligibleBatch,
		arg.EligibleBranches,
	)
	return err
}

const getEligibleStudents = `-- name: GetEligibleStudents :many
SELECT student_table.student_id, usn, name, branch, cgpa, num_active_backlogs, email_id
FROM student_job_application_table
         JOIN student_table
              ON student_table.student_id = student_job_application_table.student_id
WHERE job_id = $1
`

type GetEligibleStudentsRow struct {
	StudentID         int32   `json:"student_id"`
	Usn               string  `json:"usn"`
	Name              string  `json:"name"`
	Branch            string  `json:"branch"`
	Cgpa              float32 `json:"cgpa"`
	NumActiveBacklogs int32   `json:"num_active_backlogs"`
	EmailID           string  `json:"email_id"`
}

func (q *Queries) GetEligibleStudents(ctx context.Context, jobID int32) ([]*GetEligibleStudentsRow, error) {
	rows, err := q.db.Query(ctx, getEligibleStudents, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetEligibleStudentsRow
	for rows.Next() {
		var i GetEligibleStudentsRow
		if err := rows.Scan(
			&i.StudentID,
			&i.Usn,
			&i.Name,
			&i.Branch,
			&i.Cgpa,
			&i.NumActiveBacklogs,
			&i.EmailID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobApplicants = `-- name: GetJobApplicants :many
SELECT s.student_id, name, usn, branch, cgpa, batch, num_active_backlogs, email_id, counsellor_email_id
FROM student_table as s
JOIN student_job_application_table as sj
ON s.student_id = sj.student_id
WHERE job_id = $1
`

type GetJobApplicantsRow struct {
	StudentID         int32   `json:"student_id"`
	Name              string  `json:"name"`
	Usn               string  `json:"usn"`
	Branch            string  `json:"branch"`
	Cgpa              float32 `json:"cgpa"`
	Batch             int32   `json:"batch"`
	NumActiveBacklogs int32   `json:"num_active_backlogs"`
	EmailID           string  `json:"email_id"`
	CounsellorEmailID string  `json:"counsellor_email_id"`
}

func (q *Queries) GetJobApplicants(ctx context.Context, jobID int32) ([]*GetJobApplicantsRow, error) {
	rows, err := q.db.Query(ctx, getJobApplicants, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetJobApplicantsRow
	for rows.Next() {
		var i GetJobApplicantsRow
		if err := rows.Scan(
			&i.StudentID,
			&i.Name,
			&i.Usn,
			&i.Branch,
			&i.Cgpa,
			&i.Batch,
			&i.NumActiveBacklogs,
			&i.EmailID,
			&i.CounsellorEmailID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedJobs = `-- name: GetPublishedJobs :many
SELECT job_id, job_role, job_type, ctc, salary_tier, apply_by_date, cgpa_cutoff, eligible_batch, eligible_branches
FROM job_table
WHERE company_id = $1
`

type GetPublishedJobsRow struct {
	JobID            int32            `json:"job_id"`
	JobRole          string           `json:"job_role"`
	JobType          string           `json:"job_type"`
	Ctc              float32          `json:"ctc"`
	SalaryTier       string           `json:"salary_tier"`
	ApplyByDate      pgtype.Timestamp `json:"apply_by_date"`
	CgpaCutoff       float32          `json:"cgpa_cutoff"`
	EligibleBatch    int32            `json:"eligible_batch"`
	EligibleBranches []string         `json:"eligible_branches"`
}

func (q *Queries) GetPublishedJobs(ctx context.Context, companyID int32) ([]*GetPublishedJobsRow, error) {
	rows, err := q.db.Query(ctx, getPublishedJobs, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetPublishedJobsRow
	for rows.Next() {
		var i GetPublishedJobsRow
		if err := rows.Scan(
			&i.JobID,
			&i.JobRole,
			&i.JobType,
			&i.Ctc,
			&i.SalaryTier,
			&i.ApplyByDate,
			&i.CgpaCutoff,
			&i.EligibleBatch,
			&i.EligibleBranches,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const offerJob = `-- name: OfferJob :exec
INSERT INTO student_offer_table(student_id, job_id, action, action_date, act_by_date)
VALUES($1, $2, 'PENDING', NULL, $3)
`

type OfferJobParams struct {
	StudentID int32            `json:"student_id"`
	JobID     int32            `json:"job_id"`
	ActByDate pgtype.Timestamp `json:"act_by_date"`
}

func (q *Queries) OfferJob(ctx context.Context, arg OfferJobParams) error {
	_, err := q.db.Exec(ctx, offerJob, arg.StudentID, arg.JobID, arg.ActByDate)
	return err
}
